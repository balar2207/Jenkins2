//Install Pipeline Utility Steps
//install openjdk 17
//sudo yum install java-17-openjdk-devel
//
//To approve signature vi /var/lib/jenkins/scriptApproval.xml
// remove '//' from all the lines 
//<?xml version='1.0' encoding='UTF-8'?>
//<scriptApproval>
//  <approvedSignatures>
//    <string>method hudson.PluginManager getPlugin java.lang.String</string>
//    <string>method jenkins.model.Jenkins getPluginManager</string>
//    <string>method org.apache.maven.model.Model getArtifactId</string>
//    <string>method org.apache.maven.model.Model getGroupId</string>
//    <string>method org.apache.maven.model.Model getPackaging</string>
//    <string>method org.apache.maven.model.Model getVersion</string>
//    <string>staticMethod jenkins.model.Jenkins getInstance</string>
//  </approvedSignatures>
//</scriptApproval>
//
//restart jenkins
//sudo systemctl restart jenkins


pipeline {
    agent any

    environment {
        SONAR_URL = 'http://35.203.153.160:9000'
        SONAR_TOKEN = credentials('jenkins-sonar')
        SONAR_PROJECT_KEY = 'maven-demo'
        NEXUS_URL = "http://35.233.255.155:8081"
        NEXUS_REPOSITORY = "maven-demo"
        NEXUS_CREDENTIAL_ID = "jenkins-nexus" // ID of the Jenkins credentials
        JAVA_HOME = "/usr/lib/jvm/java-17-openjdk"
        PATH = "${JAVA_HOME}/bin:${env.PATH}"
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/c4clouds/maven-helloworld.git'
            }
        }
        stage('Inject Environment Variables') {
            steps {
                script {
                    env.NEXUSSERVERIP = '35.233.255.155'
                }
            }
        }
        stage('SonarQube Scan') {
            steps {
                script {
                    withSonarQubeEnv('sonar-server') {
                        sh "mvn sonar:sonar \
                            -Dsonar.host.url=${SONAR_URL} \
                            -Dsonar.login=${SONAR_TOKEN} \
                            -Dsonar.projectKey=${SONAR_PROJECT_KEY}"
                    }
                }
            }
        }
        stage('Build') {
            steps {
                script {
                    env.NEXUSSERVERIP = "${NEXUSSERVERIP}"
                }
                sh 'mvn clean package'
            }
        }
        stage('Upload to Nexus') {
            steps {
                script {
                    pom = readMavenPom file: "pom.xml"
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}")
                    artifactPath = filesByGlob[0].path
                    
                    withCredentials([usernamePassword(credentialsId: NEXUS_CREDENTIAL_ID, usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
                        sh """
                            curl -v -u ${NEXUS_USER}:${NEXUS_PASS} --upload-file ${artifactPath} \
                            ${NEXUS_URL}/repository/${NEXUS_REPOSITORY}/${pom.groupId.replace('.', '/')}/${pom.artifactId}/${pom.version}/${pom.artifactId}-${pom.version}.${pom.packaging}
                        """
                    }
                }
            }
        }
    }
}
